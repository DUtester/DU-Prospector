{
   "slots":{
      "0":{
         "name":"slot1",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "1":{
         "name":"slot2",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "2":{
         "name":"slot3",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "3":{
         "name":"slot4",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "4":{
         "name":"slot5",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "5":{
         "name":"slot6",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "6":{
         "name":"slot7",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "7":{
         "name":"slot8",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "8":{
         "name":"slot9",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "9":{
         "name":"slot10",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "-1":{
         "name":"unit",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "-2":{
         "name":"system",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      },
      "-3":{
         "name":"library",
         "type":{
            "events":[
               
            ],
            "methods":[
               
            ]
         }
      }
   },
   "handlers":[
      {
         "code":"-- Initalize\nunit.setTimer(\"Update\",0.01);\n\nLinePosition = 50;\nIsScreenShowing = 1;\nsystem.showScreen(1);\nPositionCounter = 1;\nMinimapHTML = \"\";\n\nPoint1HTML = \"\";\nPoint2HTML = \"\";\nPoint3HTML = \"\";\n\nSafeHUDOff = 1 --export: Automatically hide the HUD after measurement.\n",
         "filter":{
            "args":[
               
            ],
            "signature":"start()",
            "slotKey":"-1"
         },
         "key":"0"
      },
      {
         "code":"-- Get Green Line Position\nLinePosition = LinePosition - system.getMouseWheel();\n\nif LinePosition > 100 then\n    LinePosition = 100;\nelseif LinePosition < 0 then\n    LinePosition = 0;\nend\n\n-- Update HUD\nHTML = [[\n\n<style>\n.box {\n  position: absolute; \n  top: 54.5vh;\n  left: 27.5vw;\n  width: 45vw;\n  height: 28.5vh;\n  //border: 2px solid rgb(200,29,29);\n  //background-color: rgba(200,29,29,.2);\n}\n\n.infobox {\n  position: relative; \n  width: 10vw;\n  height: 10vw;\n  left: 2vw;\n  border: 2px solid rgb(200,29,29);\n  background-color: rgba(200,29,29,.2);\n}\n\n.infobox2 {\n  position: relative; \n  width: 10vw;\n  height: 10vh;\n  left: 2vw;\n  border: 2px solid rgb(200,29,29);\n  background-color: rgba(200,29,29,.2);\n}\n\n.infobox3 {\n  position: relative; \n  width: 20vw;\n  height: 31vh;\n  top: 1vw;\n  left: 2vw;\n  border: 2px solid rgb(200,29,29);\n  background-color: rgba(200,29,29,.5);\n}\n\n.trapezoid {\n  position: relative; \n  top: -0.75vh;\n  border-bottom: 28.5vh solid rgba(200,25,25,.5);\n  border-left: 5.25vw solid transparent;\n  border-right: 5.25vw solid transparent;\n  height: 0;\n  width: 44.9vw; \n}\n\n.text {\n  margin: 1vh 1vw 1vh 1vw;\n  font-size: 1.25vh;\n}\n\n.disclaimer {\n  margin: 2vh 2vw 2vh 2vw;\n  font-size: 1.2vh;\n  color:#d3d3d3;\n}  \n\n.dot {\n  position: absolute; \n  height: 10%;\n  width: 10%;\n  background-color: #bbb;\n  border-radius: 50%;\n  display: inline-block;\n}\n\nhr {\n  position: relative; \n  height: 1px;\n  border: 0;\n  border-top: 3px solid rgb(29,200,29);\n  top: ]] .. LinePosition .. [[%;\n  width: ]] .. 44.9 - (100-LinePosition)*10.5/100 .. [[vw;\n  left: -]].. LinePosition*5/100 .. [[vw;\n}\n\n</style>\n\n<div>\n\n<div class=\"infobox\">\n]] .. MinimapHTML .. [[\n</div>\n\n<div class=\"infobox2\">\n<p class=\"text\">]] .. \"<br> P1: \" ..\nPoint1HTML .. \"<br> P2: \" .. \nPoint2HTML .. \"<br> P3: \" .. \nPoint3HTML .. \"<br>\" .. \n[[</p>\n</div>\n\n<div class=\"infobox3\">\n<p class=\"text\">]] .. \n[[<strong style=\"text-decoration: underline\">User Manual</strong>]] ..\n\"<br><br> Press  <strong>\" .. system.getActionKeyName(\"option1\") .. \"</strong> to toggle HUD.\" ..\n\"<br><br> Open your scanner. Travel to 3 points at least 10 meters apart that roughly form a triangle.\" ..\n\"At each location, use the mouse wheel to align the green line with the scanner readout.\" .. \n\"Press  <strong>\" .. system.getActionKeyName(\"option2\") .. \"</strong> to record readings at each point.\" ..\n\"<br><br> After recording 3 points, <strong>2 possible locations</strong> will be printed on your chat window in LUA tab.\" ..\n\"Proceed to one of the locations with your scanner open, if the distance is increasing, switch to the other location.\" ..\n\"<br><br> Press  <strong>\" .. system.getActionKeyName(\"option3\") .. \"</strong> to start over.\" ..\n\"<br><br> Press  <strong>\" .. system.getActionKeyName(\"option4\") .. \"</strong> to kill the program in case of lag or overload.\" ..\n[[</p>\n</div>\n\n<div class=\"box\">\n\n<div class=\"trapezoid\">\n\n<hr>\n\n</div>\n\n</div>\n</div>\n\n]];\n\nsystem.setScreen(HTML);",
         "filter":{
            "args":[
               {
                  "value":"Update"
               }
            ],
            "signature":"tick(timerId)",
            "slotKey":"-1"
         },
         "key":"1"
      },
      {
         "code":"-- Auto HUD Turn OFF\nsystem.print(\"HUD has been turned off to avoid lag due to mouse/HUD interaction bug! Press <strong>\" .. system.getActionKeyName(\"option1\") .. \"</strong> to turn the HUD back on for a new measurement or diagnostics!\");\nsystem.showScreen(0);\nIsScreenShowing = 0;\nunit.stopTimer(\"Safety\")",
         "filter":{
            "args":[
               {
                  "value":"Safety"
               }
            ],
            "signature":"tick(timerId)",
            "slotKey":"-1"
         },
         "key":"2"
      },
      {
         "code":"-- Toggle HUD\nif IsScreenShowing == 0 then\n    system.showScreen(1);\n    IsScreenShowing = 1;\nelseif IsScreenShowing == 1 then\n    system.showScreen(0)\n    IsScreenShowing = 0;\nend",
         "filter":{
            "args":[
               {
                  "value":"option1"
               }
            ],
            "signature":"actionStart(action)",
            "slotKey":"-2"
         },
         "key":"3"
      },
      {
         "code":"-- Measure First Point\nif PositionCounter == 1 then\n    CurrentPost = system.getPlayerWorldPos(unit.getMasterPlayerId());\n    Position1 = {x = CurrentPost[1], y = CurrentPost[2], z = CurrentPost[3]};\n    PositionCounter = 2;\n    r1 = interpolateDistance(LinePosition);\n    A1 = vectorSubtract(Position1,Position1);\n    Point1HTML = tostring(math.floor(A1.x)) .. ',' .. tostring(math.floor(A1.y)) .. ',' .. tostring(math.floor(A1.z)) .. ':' .. tostring(math.floor(r1));\n\n-- Measure Second Point\nelseif PositionCounter == 2 then\n    CurrentPost = system.getPlayerWorldPos(unit.getMasterPlayerId());\n    Position2 = {x = CurrentPost[1], y = CurrentPost[2], z = CurrentPost[3]};\n    PositionCounter = 3;\n    r2 = interpolateDistance(LinePosition);\n    A2 = vectorSubtract(Position2,Position1);\n    Point2HTML = tostring(math.floor(A2.x)) .. ',' .. tostring(math.floor(A2.y)) .. ',' .. tostring(math.floor(A2.z)) .. ':' .. tostring(math.floor(r2));\n\n-- Measure Third Point\nelseif PositionCounter == 3 then\n    CurrentPost = system.getPlayerWorldPos(unit.getMasterPlayerId());\n    Position3 = {x = CurrentPost[1], y = CurrentPost[2], z = CurrentPost[3]};\n    PositionCounter = 0;\n    r3 = interpolateDistance(LinePosition);\n    A3 = vectorSubtract(Position3,Position1);\n    Point3HTML = tostring(math.floor(A3.x)) .. ',' .. tostring(math.floor(A3.y)) .. ',' .. tostring(math.floor(A3.z)) .. ':' .. tostring(math.floor(r3));\n\n    -- Projection to Common Frame\n    i = vectorScalarProduct(A2,1/vectorNorm(A2)); \n    j = vectorScalarProduct(vectorSubtract(A3,vectorScalarProduct(i,vectorInnerProduct(A3,i))),1/vectorNorm(vectorSubtract(A3,vectorScalarProduct(i,vectorInnerProduct(A3,i)))));\n    k = vectorCross(i,j);\n\n    -- Triangulation\n    X = (r1^2 - r2^2 + vectorNorm(A2)^2)/(2*vectorNorm(A2));\n    Y = (r1^2 - r3^2 + vectorNorm(A3)^2 - 2*vectorInnerProduct(A3,i)*X)/(2*vectorInnerProduct(A3,j));\n    Z = math.sqrt(r1^2 - X^2 - Y^2); \n\n    -- Projection Back to World Frame\n    Origin = Position1;\n    Guess1 = vectorSum(vectorSum(vectorSum(Origin,vectorScalarProduct(i,X)),vectorScalarProduct(j,Y)),vectorScalarProduct(k,Z));\n    Guess2 = vectorSubtract(vectorSum(vectorSum(Origin,vectorScalarProduct(i,X)),vectorScalarProduct(j,Y)),vectorScalarProduct(k,Z));\n    \n    -- Rounding\n    Guess1.x = math.floor(Guess1.x*100)/100;\n    Guess1.y = math.floor(Guess1.y*100)/100;\n    Guess1.z = math.floor(Guess1.z*100)/100;\n    \n    Guess2.x = math.floor(Guess2.x*100)/100;\n    Guess2.y = math.floor(Guess2.y*100)/100;\n    Guess2.z = math.floor(Guess2.z*100)/100;    \n    \n    -- Report Potential Ore Locations\n    Guess1String = [[::pos{0,0,]] ..\n        tostring(Guess1.x) .. ',' .. \n        tostring(Guess1.y) .. ',' .. \n        tostring(Guess1.z) .. '}';\n\n    Guess2String = [[::pos{0,0,]] ..\n        tostring(Guess2.x) .. ',' .. \n        tostring(Guess2.y) .. ',' .. \n        tostring(Guess2.z) .. '}';\n    \n    -- Visualize Triangulation Points\n    ProjectedA1 = {x = vectorInnerProduct(A1,i), y = vectorInnerProduct(A1,j)};\n    ProjectedA2 = {x = vectorInnerProduct(A2,i), y = vectorInnerProduct(A2,j)};\n    ProjectedA3 = {x = vectorInnerProduct(A3,i), y = vectorInnerProduct(A3,j)};\n    \n    Xmin = math.min(ProjectedA1.x,ProjectedA2.x,ProjectedA3.x);\n    Ymin = math.min(ProjectedA1.y,ProjectedA2.y,ProjectedA3.y);\n    Xmax = math.max(ProjectedA1.x,ProjectedA2.x,ProjectedA3.x);\n    Ymax = math.max(ProjectedA1.y,ProjectedA2.y,ProjectedA3.y);\n    \n    Xscale = Xmax-Xmin;\n    Yscale = Ymax-Ymin;\n    MaxScale = math.max(Xscale,Yscale,X);\n    \n    MinimapHTML = [[<span class=\"dot\" style=\"top:]] .. 90 - 100*0.9*(ProjectedA1.y - Ymin)/MaxScale .. [[%;left:]] .. 100*0.9*(ProjectedA1.x - Xmin)/MaxScale .. [[%\"></span>]] ..\n    [[<span class=\"dot\" style=\"top:]] .. 90 - 100*0.9*(ProjectedA2.y - Ymin)/MaxScale .. [[%;left:]] .. 100*0.9*(ProjectedA2.x - Xmin)/MaxScale .. [[%\"></span>]] ..\n    [[<span class=\"dot\" style=\"top:]] .. 90 - 100*0.9*(ProjectedA3.y - Ymin)/MaxScale .. [[%;left:]] .. 100*0.9*(ProjectedA3.x - Xmin)/MaxScale .. [[%\"></span>]]\n   \n    system.print(Guess1String);\n    system.print(Guess2String);\t\n    \n    -- Turn HUD Off\n    if SafeHUDOff == 1 then\n    \tunit.setTimer(\"Safety\", 1.5)   \n    end\n        \nelseif PositionCounter == 0 then\n    \n    -- Reset\n    MinimapHTML = \"\";\n    Position1 = {};\n    Position2 = {};\n    Position3 = {};\n    r1 = {};\n    r2 = {};\n    r3 = {};\n    PositionCounter = 1;\n    Point1HTML = \"\";\n    Point2HTML = \"\";\n    Point3HTML = \"\";\n    \nend",
         "filter":{
            "args":[
               {
                  "value":"option2"
               }
            ],
            "signature":"actionStart(action)",
            "slotKey":"-2"
         },
         "key":"4"
      },
      {
         "code":"-- Safe Exit for Lag\nunit.exit()",
         "filter":{
            "args":[
               {
                  "value":"option4"
               }
            ],
            "signature":"actionStart(action)",
            "slotKey":"-2"
         },
         "key":"5"
      },
      {
         "code":"-- Reset\nMinimapHTML = \"\";\nPosition1 = {};\nPosition2 = {};\nPosition3 = {};\nr1 = {};\nr2 = {};\nr3 = {};\nPositionCounter = 1;\nPoint1HTML = \"\";\nPoint2HTML = \"\";\nPoint3HTML = \"\";",
         "filter":{
            "args":[
               {
                  "value":"option3"
               }
            ],
            "signature":"actionStart(action)",
            "slotKey":"-2"
         },
         "key":"6"
      },
      {
         "code":"-- Helper Functions for Simple Vector Algebra\n\nfunction vectorNorm (Vector)\n    Norm = math.sqrt((Vector.x^2)+(Vector.y^2)+(Vector.z^2));\n    return Norm\nend\n   \nfunction vectorInnerProduct (A,B)\n    C = A.x*B.x + A.y*B.y + A.z*B.z;\n    return C\nend\n\nfunction vectorSum (A,B)\n    C = {};\n    C.x = A.x + B.x;\n    C.y = A.y + B.y;\n    C.z = A.z + B.z;\n    return C\nend\n\nfunction vectorSubtract (A,B)\n    C = {};\n    C.x = A.x - B.x;\n    C.y = A.y - B.y;\n    C.z = A.z - B.z;\n    return C\nend\n\nfunction vectorScalarProduct (A,b)\n    C = {};\n    C.x = A.x*b;\n    C.y = A.y*b;\n    C.z = A.z*b;\n    return C\nend\n    \nfunction vectorCross (A,B)\n    C = {};\n    C.x = A.y*B.z - A.z*B.y;\n    C.y = A.z*B.x - A.x*B.z;\n    C.z = A.x*B.y - A.y*B.x;\n    return C\nend\n\nfunction interpolateDistance (BoxPercent)\n    if BoxPercent <= 15 then\n        r = 400 + 100*((15)-BoxPercent)/(15*0);\n    elseif BoxPercent <= 33 then\n        r = 300 + 100*((33)-BoxPercent)/(33-15);\n    elseif BoxPercent <= 53 then\n        r = 200 + 100*((53)-BoxPercent)/(53-33);\n    elseif BoxPercent <= 75 then\n        r = 100 + 100*((75)-BoxPercent)/(75-53);\n    elseif BoxPercent <= 100 then\n        r = 0 + 100*((100)-BoxPercent)/(100-75);\n    end\n    return r\nend",
         "filter":{
            "args":[
               
            ],
            "signature":"start()",
            "slotKey":"-3"
         },
         "key":"7"
      }
   ],
   "methods":[
      
   ],
   "events":[
      
   ]
}
